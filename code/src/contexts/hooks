// import {useEffect, useState} from 'react'
// import {
// 	useMeQuery,
// 	useSignInMutation,
// 	SignInMutationVariables,
// 	SignInInput,
// 	SignInMutation
// } from './../graphql/graphql'
// import * as Apollo from "@apollo/client";
// import _ from 'lodash'

// export const useCheckAuth = ( pollInterval:number = 0 ) => {
// 	const { data, loading, error } = useMeQuery({
// 		pollInterval
// 	})

// 	if ( error && error?.graphQLErrors && _.find(error?.graphQLErrors, s => s.message === 'unauthorized') ) {
// 		return { data: null, loading }
// 	}

// 	return { data, loading, error }
// }

// export const useLogin = (baseOptions?: Apollo.MutationHookOptions<SignInMutation, SignInMutationVariables>) => {
// 	const [signInMutation, { data, loading, error }] = useSignInMutation()
// 	const signIn = (params: SignInInput) => {
// 		return signInMutation({
// 			...baseOptions,
// 			variables: { signInInput: params }
// 		})
// 	}

// 	return [
// 		signIn,
// 		{
// 			data,
// 			loading,
// 			error
// 		}
// 	]
// }